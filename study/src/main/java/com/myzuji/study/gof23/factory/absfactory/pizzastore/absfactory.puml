# 抽象工厂模式
# 抽象工厂模式和工厂方法不太一样，它要解决的问题比较复杂，不但工厂是抽象的，产品是抽象的，
# 而且有多个产品需要创建，因此，这个抽象工厂会对应到多个实际工厂，每个实际工厂负责创建多个实际产品
@startuml
abstract class Pizza {
     String name

     abstract void prepare()
     void bake()
     void cut()
     void box()

}
class BJCheesePizza{
    void prepare()
}
class BJPepperPizza{
    void prepare()
}
class LDCheesePizza{
    void prepare()
}
class LDPepperPizza{
    void prepare()
}

Pizza <|-- BJCheesePizza
Pizza <|-- BJPepperPizza
Pizza <|-- LDCheesePizza
Pizza <|-- LDPepperPizza

interface AbsFactory{
    Pizza createPizza()
}

class BJFactory
class LDFactory

class OrderPizza

class PizzaStore

BJCheesePizza <.. BJFactory
BJPepperPizza <.. BJFactory
LDCheesePizza <.. LDFactory
LDPepperPizza <.. LDFactory

BJFactory --|> AbsFactory
LDFactory --|> AbsFactory

OrderPizza o- AbsFactory

AbsFactory <.. PizzaStore
OrderPizza <.. PizzaStore

@enduml
